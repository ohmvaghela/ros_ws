// Generated by gencpp from file bot_msg/bot_param.msg
// DO NOT EDIT!


#ifndef BOT_MSG_MESSAGE_BOT_PARAM_H
#define BOT_MSG_MESSAGE_BOT_PARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bot_msg
{
template <class ContainerAllocator>
struct bot_param_
{
  typedef bot_param_<ContainerAllocator> Type;

  bot_param_()
    : radius(0.0)
    , lx(0.0)
    , ly(0.0)  {
    }
  bot_param_(const ContainerAllocator& _alloc)
    : radius(0.0)
    , lx(0.0)
    , ly(0.0)  {
  (void)_alloc;
    }



   typedef float _radius_type;
  _radius_type radius;

   typedef float _lx_type;
  _lx_type lx;

   typedef float _ly_type;
  _ly_type ly;





  typedef boost::shared_ptr< ::bot_msg::bot_param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bot_msg::bot_param_<ContainerAllocator> const> ConstPtr;

}; // struct bot_param_

typedef ::bot_msg::bot_param_<std::allocator<void> > bot_param;

typedef boost::shared_ptr< ::bot_msg::bot_param > bot_paramPtr;
typedef boost::shared_ptr< ::bot_msg::bot_param const> bot_paramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bot_msg::bot_param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bot_msg::bot_param_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bot_msg::bot_param_<ContainerAllocator1> & lhs, const ::bot_msg::bot_param_<ContainerAllocator2> & rhs)
{
  return lhs.radius == rhs.radius &&
    lhs.lx == rhs.lx &&
    lhs.ly == rhs.ly;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bot_msg::bot_param_<ContainerAllocator1> & lhs, const ::bot_msg::bot_param_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bot_msg::bot_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bot_msg::bot_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bot_msg::bot_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bot_msg::bot_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bot_msg::bot_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bot_msg::bot_param_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bot_msg::bot_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5e53d0394b914157d262ee240387e65";
  }

  static const char* value(const ::bot_msg::bot_param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5e53d0394b91415ULL;
  static const uint64_t static_value2 = 0x7d262ee240387e65ULL;
};

template<class ContainerAllocator>
struct DataType< ::bot_msg::bot_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bot_msg/bot_param";
  }

  static const char* value(const ::bot_msg::bot_param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bot_msg::bot_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 radius\n"
"float32 lx # half of length of bot in x-direction\n"
"float32 ly # half of length of bot in y-direction\n"
"\n"
;
  }

  static const char* value(const ::bot_msg::bot_param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bot_msg::bot_param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radius);
      stream.next(m.lx);
      stream.next(m.ly);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bot_msg::bot_param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bot_msg::bot_param_<ContainerAllocator>& v)
  {
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "lx: ";
    Printer<float>::stream(s, indent + "  ", v.lx);
    s << indent << "ly: ";
    Printer<float>::stream(s, indent + "  ", v.ly);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOT_MSG_MESSAGE_BOT_PARAM_H
