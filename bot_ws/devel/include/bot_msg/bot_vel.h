// Generated by gencpp from file bot_msg/bot_vel.msg
// DO NOT EDIT!


#ifndef BOT_MSG_MESSAGE_BOT_VEL_H
#define BOT_MSG_MESSAGE_BOT_VEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bot_msg
{
template <class ContainerAllocator>
struct bot_vel_
{
  typedef bot_vel_<ContainerAllocator> Type;

  bot_vel_()
    : linear_vel(0.0)
    , angular_vel(0.0)
    , orientation(0.0)  {
    }
  bot_vel_(const ContainerAllocator& _alloc)
    : linear_vel(0.0)
    , angular_vel(0.0)
    , orientation(0.0)  {
  (void)_alloc;
    }



   typedef float _linear_vel_type;
  _linear_vel_type linear_vel;

   typedef float _angular_vel_type;
  _angular_vel_type angular_vel;

   typedef float _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::bot_msg::bot_vel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bot_msg::bot_vel_<ContainerAllocator> const> ConstPtr;

}; // struct bot_vel_

typedef ::bot_msg::bot_vel_<std::allocator<void> > bot_vel;

typedef boost::shared_ptr< ::bot_msg::bot_vel > bot_velPtr;
typedef boost::shared_ptr< ::bot_msg::bot_vel const> bot_velConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bot_msg::bot_vel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bot_msg::bot_vel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bot_msg::bot_vel_<ContainerAllocator1> & lhs, const ::bot_msg::bot_vel_<ContainerAllocator2> & rhs)
{
  return lhs.linear_vel == rhs.linear_vel &&
    lhs.angular_vel == rhs.angular_vel &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bot_msg::bot_vel_<ContainerAllocator1> & lhs, const ::bot_msg::bot_vel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bot_msg::bot_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bot_msg::bot_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bot_msg::bot_vel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bot_msg::bot_vel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bot_msg::bot_vel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bot_msg::bot_vel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bot_msg::bot_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "263c8ee54faf31d00782a1588f2032bf";
  }

  static const char* value(const ::bot_msg::bot_vel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x263c8ee54faf31d0ULL;
  static const uint64_t static_value2 = 0x0782a1588f2032bfULL;
};

template<class ContainerAllocator>
struct DataType< ::bot_msg::bot_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bot_msg/bot_vel";
  }

  static const char* value(const ::bot_msg::bot_vel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bot_msg::bot_vel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 linear_vel\n"
"float32 angular_vel # CCW -> +ve\n"
"float32 orientation # angle with x-axis\n"
;
  }

  static const char* value(const ::bot_msg::bot_vel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bot_msg::bot_vel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_vel);
      stream.next(m.angular_vel);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_vel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bot_msg::bot_vel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bot_msg::bot_vel_<ContainerAllocator>& v)
  {
    s << indent << "linear_vel: ";
    Printer<float>::stream(s, indent + "  ", v.linear_vel);
    s << indent << "angular_vel: ";
    Printer<float>::stream(s, indent + "  ", v.angular_vel);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BOT_MSG_MESSAGE_BOT_VEL_H
